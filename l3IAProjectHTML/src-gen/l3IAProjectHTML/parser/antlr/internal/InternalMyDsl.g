/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package l3IAProjectHTML.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package l3IAProjectHTML.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import l3IAProjectHTML.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getFilterFilterParserRuleCall_0_0_0());
					}
					lv_filter_0_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"filter",
							lv_filter_0_0,
							"l3IAProjectHTML.MyDsl.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getFilterFilterParserRuleCall_0_1_0());
					}
					lv_filter_1_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"filter",
							lv_filter_1_0,
							"l3IAProjectHTML.MyDsl.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getFileloaderFileLoaderParserRuleCall_1_0());
				}
				lv_fileloader_2_0=ruleFileLoader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"fileloader",
						lv_fileloader_2_0,
						"l3IAProjectHTML.MyDsl.FileLoader");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getFileloaderFileLoaderParserRuleCall_2_1_0());
					}
					lv_fileloader_4_0=ruleFileLoader
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"fileloader",
							lv_fileloader_4_0,
							"l3IAProjectHTML.MyDsl.FileLoader");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getGraphGraphParserRuleCall_3_0_0());
					}
					lv_graph_5_0=ruleGraph
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"graph",
							lv_graph_5_0,
							"l3IAProjectHTML.MyDsl.Graph");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getProgramAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProgramAccess().getGraphGraphParserRuleCall_3_1_1_0());
						}
						lv_graph_7_0=ruleGraph
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProgramRule());
							}
							add(
								$current,
								"graph",
								lv_graph_7_0,
								"l3IAProjectHTML.MyDsl.Graph");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column'
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterAccess().getColumnKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFilterAccess().getColonKeyword_1());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFilterAccess().getFilterAction_2(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"l3IAProjectHTML.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFilterAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_abs_5_0='abs'
					{
						newLeafNode(lv_abs_5_0, grammarAccess.getFilterAccess().getAbsAbsKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFilterRule());
						}
						setWithLastConsumed($current, "abs", lv_abs_5_0 != null, "abs");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getComparaisonEnumComparaisonEnumRuleCall_5_0());
				}
				lv_comparaison_6_0=ruleEnumComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"comparaison",
						lv_comparaison_6_0,
						"l3IAProjectHTML.MyDsl.EnumComparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getElementComparaisonEStringParserRuleCall_6_0());
				}
				lv_elementComparaison_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"elementComparaison",
						lv_elementComparaison_7_0,
						"l3IAProjectHTML.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	iv_ruleGraph=ruleGraph
	{ $current=$iv_ruleGraph.current; }
	EOF;

// Rule Graph
ruleGraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Graph'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphAccess().getGraphKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='graphName'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphAccess().getGraphNameKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getGraphAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"l3IAProjectHTML.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='graphType'
		{
			newLeafNode(otherlv_5, grammarAccess.getGraphAccess().getGraphTypeKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getGraphAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getTypeEnumTypeEnumRuleCall_7_0());
				}
				lv_type_7_0=ruleEnumType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"l3IAProjectHTML.MyDsl.EnumType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleFileLoader
entryRuleFileLoader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileLoaderRule()); }
	iv_ruleFileLoader=ruleFileLoader
	{ $current=$iv_ruleFileLoader.current; }
	EOF;

// Rule FileLoader
ruleFileLoader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileLoaderAccess().getFileLoaderAction_0(),
					$current);
			}
		)
		otherlv_1='File'
		{
			newLeafNode(otherlv_1, grammarAccess.getFileLoaderAccess().getFileKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFileLoaderAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFileLoaderAccess().getPathEStringParserRuleCall_3_0());
				}
				lv_path_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileLoaderRule());
					}
					set(
						$current,
						"path",
						lv_path_3_0,
						"l3IAProjectHTML.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule EnumType
ruleEnumType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='line'
			{
				$current = grammarAccess.getEnumTypeAccess().getLineEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEnumTypeAccess().getLineEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='bar'
			{
				$current = grammarAccess.getEnumTypeAccess().getBarEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEnumTypeAccess().getBarEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='pie'
			{
				$current = grammarAccess.getEnumTypeAccess().getPieEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEnumTypeAccess().getPieEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='doughnut'
			{
				$current = grammarAccess.getEnumTypeAccess().getDoughnutEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEnumTypeAccess().getDoughnutEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='scatter'
			{
				$current = grammarAccess.getEnumTypeAccess().getScatterEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEnumTypeAccess().getScatterEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='bubble'
			{
				$current = grammarAccess.getEnumTypeAccess().getBubbleEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEnumTypeAccess().getBubbleEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='radar'
			{
				$current = grammarAccess.getEnumTypeAccess().getRadarEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getEnumTypeAccess().getRadarEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='polarArea'
			{
				$current = grammarAccess.getEnumTypeAccess().getPolarAreaEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getEnumTypeAccess().getPolarAreaEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule EnumComparaison
ruleEnumComparaison returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='none'
			{
				$current = grammarAccess.getEnumComparaisonAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEnumComparaisonAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='='
			{
				$current = grammarAccess.getEnumComparaisonAccess().getEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEnumComparaisonAccess().getEqualEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getEnumComparaisonAccess().getSupEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEnumComparaisonAccess().getSupEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<'
			{
				$current = grammarAccess.getEnumComparaisonAccess().getInfEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEnumComparaisonAccess().getInfEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
