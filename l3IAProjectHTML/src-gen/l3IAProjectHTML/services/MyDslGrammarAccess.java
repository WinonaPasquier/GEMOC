/*
 * generated by Xtext 2.25.0
 */
package l3IAProjectHTML.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFilterFilterParserRuleCall_0_0_0 = (RuleCall)cFilterAssignment_0_0.eContents().get(0);
		private final Assignment cFilterAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_0_1_0 = (RuleCall)cFilterAssignment_0_1.eContents().get(0);
		private final Assignment cFileloaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileloaderFileLoaderParserRuleCall_1_0 = (RuleCall)cFileloaderAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFileloaderAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFileloaderFileLoaderParserRuleCall_2_1_0 = (RuleCall)cFileloaderAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cGraphAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cGraphGraphParserRuleCall_3_0_0 = (RuleCall)cGraphAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cGraphAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cGraphGraphParserRuleCall_3_1_1_0 = (RuleCall)cGraphAssignment_3_1_1.eContents().get(0);
		
		//Program returns Program:
		//        ( filter+=Filter ( filter+=Filter)* )?
		//         fileloader+=FileLoader ( "," fileloader+=FileLoader)*
		//        ( graph+=Graph ( "," graph+=Graph)* )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//( filter+=Filter ( filter+=Filter)* )?
		// fileloader+=FileLoader ( "," fileloader+=FileLoader)*
		//( graph+=Graph ( "," graph+=Graph)* )?
		public Group getGroup() { return cGroup; }
		
		//( filter+=Filter ( filter+=Filter)* )?
		public Group getGroup_0() { return cGroup_0; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_0_0() { return cFilterAssignment_0_0; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_0_0() { return cFilterFilterParserRuleCall_0_0_0; }
		
		//( filter+=Filter)*
		public Assignment getFilterAssignment_0_1() { return cFilterAssignment_0_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_1_0() { return cFilterFilterParserRuleCall_0_1_0; }
		
		//fileloader+=FileLoader
		public Assignment getFileloaderAssignment_1() { return cFileloaderAssignment_1; }
		
		//FileLoader
		public RuleCall getFileloaderFileLoaderParserRuleCall_1_0() { return cFileloaderFileLoaderParserRuleCall_1_0; }
		
		//( "," fileloader+=FileLoader)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//fileloader+=FileLoader
		public Assignment getFileloaderAssignment_2_1() { return cFileloaderAssignment_2_1; }
		
		//FileLoader
		public RuleCall getFileloaderFileLoaderParserRuleCall_2_1_0() { return cFileloaderFileLoaderParserRuleCall_2_1_0; }
		
		//( graph+=Graph ( "," graph+=Graph)* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//graph+=Graph
		public Assignment getGraphAssignment_3_0() { return cGraphAssignment_3_0; }
		
		//Graph
		public RuleCall getGraphGraphParserRuleCall_3_0_0() { return cGraphGraphParserRuleCall_3_0_0; }
		
		//( "," graph+=Graph)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//graph+=Graph
		public Assignment getGraphAssignment_3_1_1() { return cGraphAssignment_3_1_1; }
		
		//Graph
		public RuleCall getGraphGraphParserRuleCall_3_1_1_0() { return cGraphGraphParserRuleCall_3_1_1_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cFilterAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cColumnnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnnameEStringParserRuleCall_3_0 = (RuleCall)cColumnnameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAbsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cAbsAbsKeyword_4_1_0 = (Keyword)cAbsAssignment_4_1.eContents().get(0);
		private final Assignment cComparaisonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparaisonEnumComparaisonEnumRuleCall_5_0 = (RuleCall)cComparaisonAssignment_5.eContents().get(0);
		private final Assignment cElementComparaisonAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementComparaisonEStringParserRuleCall_6_0 = (RuleCall)cElementComparaisonAssignment_6.eContents().get(0);
		
		//Filter returns Filter:
		//    'Column' ':'
		//    {Filter}
		//    columnname=EString
		//    (','abs?='abs')?
		//    (comparaison=EnumComparaison)?
		//    (elementComparaison=EString)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Column' ':'
		//{Filter}
		//columnname=EString
		//(','abs?='abs')?
		//(comparaison=EnumComparaison)?
		//(elementComparaison=EString)?
		public Group getGroup() { return cGroup; }
		
		//'Column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//{Filter}
		public Action getFilterAction_2() { return cFilterAction_2; }
		
		//columnname=EString
		public Assignment getColumnnameAssignment_3() { return cColumnnameAssignment_3; }
		
		//EString
		public RuleCall getColumnnameEStringParserRuleCall_3_0() { return cColumnnameEStringParserRuleCall_3_0; }
		
		//(','abs?='abs')?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//abs?='abs'
		public Assignment getAbsAssignment_4_1() { return cAbsAssignment_4_1; }
		
		//'abs'
		public Keyword getAbsAbsKeyword_4_1_0() { return cAbsAbsKeyword_4_1_0; }
		
		//(comparaison=EnumComparaison)?
		public Assignment getComparaisonAssignment_5() { return cComparaisonAssignment_5; }
		
		//EnumComparaison
		public RuleCall getComparaisonEnumComparaisonEnumRuleCall_5_0() { return cComparaisonEnumComparaisonEnumRuleCall_5_0; }
		
		//(elementComparaison=EString)?
		public Assignment getElementComparaisonAssignment_6() { return cElementComparaisonAssignment_6; }
		
		//EString
		public RuleCall getElementComparaisonEStringParserRuleCall_6_0() { return cElementComparaisonEStringParserRuleCall_6_0; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGraphNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGraphnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGraphnameEStringParserRuleCall_4_0 = (RuleCall)cGraphnameAssignment_4.eContents().get(0);
		private final Keyword cGraphTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cGraphtypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGraphtypeEnumTypeEnumRuleCall_7_0 = (RuleCall)cGraphtypeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Graph returns Graph:
		//    'Graph''{'
		//    'graphName'':'graphname=EString
		//    'graphType'':'graphtype=EnumType
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Graph''{'
		//'graphName'':'graphname=EString
		//'graphType'':'graphtype=EnumType
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Graph'
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'graphName'
		public Keyword getGraphNameKeyword_2() { return cGraphNameKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//graphname=EString
		public Assignment getGraphnameAssignment_4() { return cGraphnameAssignment_4; }
		
		//EString
		public RuleCall getGraphnameEStringParserRuleCall_4_0() { return cGraphnameEStringParserRuleCall_4_0; }
		
		//'graphType'
		public Keyword getGraphTypeKeyword_5() { return cGraphTypeKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//graphtype=EnumType
		public Assignment getGraphtypeAssignment_7() { return cGraphtypeAssignment_7; }
		
		//EnumType
		public RuleCall getGraphtypeEnumTypeEnumRuleCall_7_0() { return cGraphtypeEnumTypeEnumRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FileLoaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.FileLoader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileLoaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathEStringParserRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		
		//FileLoader returns FileLoader:
		//    {FileLoader}
		//    'File' ':'
		//    path=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{FileLoader}
		//'File' ':'
		//path=EString
		public Group getGroup() { return cGroup; }
		
		//{FileLoader}
		public Action getFileLoaderAction_0() { return cFileLoaderAction_0; }
		
		//'File'
		public Keyword getFileKeyword_1() { return cFileKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//path=EString
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_3_0() { return cPathEStringParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.EBooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBooleanObject returns ecore::EBooleanObject:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class EnumTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.EnumType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLineLineKeyword_0_0 = (Keyword)cLineEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBarEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBarBarKeyword_1_0 = (Keyword)cBarEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPiePieKeyword_2_0 = (Keyword)cPieEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoughnutEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoughnutDoughnutKeyword_3_0 = (Keyword)cDoughnutEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cScatterEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cScatterScatterKeyword_4_0 = (Keyword)cScatterEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBubbleEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBubbleBubbleKeyword_5_0 = (Keyword)cBubbleEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cRadarEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cRadarRadarKeyword_6_0 = (Keyword)cRadarEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPolarAreaEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPolarAreaPolarAreaKeyword_7_0 = (Keyword)cPolarAreaEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum EnumType returns EnumType:
		//    line='line'|bar='bar'|pie='pie'|doughnut='doughnut'|scatter ='scatter'|bubble ='bubble'|radar='radar'|polarArea='polarArea';
		public EnumRule getRule() { return rule; }
		
		//line='line'|bar='bar'|pie='pie'|doughnut='doughnut'|scatter ='scatter'|bubble ='bubble'|radar='radar'|polarArea='polarArea'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//line='line'
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_0() { return cLineEnumLiteralDeclaration_0; }
		
		//'line'
		public Keyword getLineLineKeyword_0_0() { return cLineLineKeyword_0_0; }
		
		//bar='bar'
		public EnumLiteralDeclaration getBarEnumLiteralDeclaration_1() { return cBarEnumLiteralDeclaration_1; }
		
		//'bar'
		public Keyword getBarBarKeyword_1_0() { return cBarBarKeyword_1_0; }
		
		//pie='pie'
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration_2() { return cPieEnumLiteralDeclaration_2; }
		
		//'pie'
		public Keyword getPiePieKeyword_2_0() { return cPiePieKeyword_2_0; }
		
		//doughnut='doughnut'
		public EnumLiteralDeclaration getDoughnutEnumLiteralDeclaration_3() { return cDoughnutEnumLiteralDeclaration_3; }
		
		//'doughnut'
		public Keyword getDoughnutDoughnutKeyword_3_0() { return cDoughnutDoughnutKeyword_3_0; }
		
		//scatter ='scatter'
		public EnumLiteralDeclaration getScatterEnumLiteralDeclaration_4() { return cScatterEnumLiteralDeclaration_4; }
		
		//'scatter'
		public Keyword getScatterScatterKeyword_4_0() { return cScatterScatterKeyword_4_0; }
		
		//bubble ='bubble'
		public EnumLiteralDeclaration getBubbleEnumLiteralDeclaration_5() { return cBubbleEnumLiteralDeclaration_5; }
		
		//'bubble'
		public Keyword getBubbleBubbleKeyword_5_0() { return cBubbleBubbleKeyword_5_0; }
		
		//radar='radar'
		public EnumLiteralDeclaration getRadarEnumLiteralDeclaration_6() { return cRadarEnumLiteralDeclaration_6; }
		
		//'radar'
		public Keyword getRadarRadarKeyword_6_0() { return cRadarRadarKeyword_6_0; }
		
		//polarArea='polarArea'
		public EnumLiteralDeclaration getPolarAreaEnumLiteralDeclaration_7() { return cPolarAreaEnumLiteralDeclaration_7; }
		
		//'polarArea'
		public Keyword getPolarAreaPolarAreaKeyword_7_0() { return cPolarAreaPolarAreaKeyword_7_0; }
	}
	public class EnumComparaisonElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "l3IAProjectHTML.MyDsl.EnumComparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualEqualsSignKeyword_1_0 = (Keyword)cEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSupGreaterThanSignKeyword_2_0 = (Keyword)cSupEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInfLessThanSignKeyword_3_0 = (Keyword)cInfEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSupEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSupEqualGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cSupEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInfEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInfEqualLessThanSignEqualsSignKeyword_5_0 = (Keyword)cInfEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_6_0 = (Keyword)cNotEqualEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum EnumComparaison returns EnumComparaison:
		//    none='none'|equal='='|sup='>'|inf='<'|supEqual='>='|infEqual='<='|notEqual='!=';
		public EnumRule getRule() { return rule; }
		
		//none='none'|equal='='|sup='>'|inf='<'|supEqual='>='|infEqual='<='|notEqual='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//none='none'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'none'
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_1() { return cEqualEnumLiteralDeclaration_1; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_1_0() { return cEqualEqualsSignKeyword_1_0; }
		
		//sup='>'
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_2() { return cSupEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getSupGreaterThanSignKeyword_2_0() { return cSupGreaterThanSignKeyword_2_0; }
		
		//inf='<'
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_3() { return cInfEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getInfLessThanSignKeyword_3_0() { return cInfLessThanSignKeyword_3_0; }
		
		//supEqual='>='
		public EnumLiteralDeclaration getSupEqualEnumLiteralDeclaration_4() { return cSupEqualEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getSupEqualGreaterThanSignEqualsSignKeyword_4_0() { return cSupEqualGreaterThanSignEqualsSignKeyword_4_0; }
		
		//infEqual='<='
		public EnumLiteralDeclaration getInfEqualEnumLiteralDeclaration_5() { return cInfEqualEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getInfEqualLessThanSignEqualsSignKeyword_5_0() { return cInfEqualLessThanSignEqualsSignKeyword_5_0; }
		
		//notEqual='!='
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_6() { return cNotEqualEnumLiteralDeclaration_6; }
		
		//'!='
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_6_0() { return cNotEqualExclamationMarkEqualsSignKeyword_6_0; }
	}
	
	private final ProgramElements pProgram;
	private final FilterElements pFilter;
	private final GraphElements pGraph;
	private final FileLoaderElements pFileLoader;
	private final EStringElements pEString;
	private final EBooleanObjectElements pEBooleanObject;
	private final EnumTypeElements eEnumType;
	private final EnumComparaisonElements eEnumComparaison;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFilter = new FilterElements();
		this.pGraph = new GraphElements();
		this.pFileLoader = new FileLoaderElements();
		this.pEString = new EStringElements();
		this.pEBooleanObject = new EBooleanObjectElements();
		this.eEnumType = new EnumTypeElements();
		this.eEnumComparaison = new EnumComparaisonElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("l3IAProjectHTML.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//        ( filter+=Filter ( filter+=Filter)* )?
	//         fileloader+=FileLoader ( "," fileloader+=FileLoader)*
	//        ( graph+=Graph ( "," graph+=Graph)* )?
	//    ;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Filter returns Filter:
	//    'Column' ':'
	//    {Filter}
	//    columnname=EString
	//    (','abs?='abs')?
	//    (comparaison=EnumComparaison)?
	//    (elementComparaison=EString)?
	//    ;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Graph returns Graph:
	//    'Graph''{'
	//    'graphName'':'graphname=EString
	//    'graphType'':'graphtype=EnumType
	//    '}'
	//;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//FileLoader returns FileLoader:
	//    {FileLoader}
	//    'File' ':'
	//    path=EString;
	public FileLoaderElements getFileLoaderAccess() {
		return pFileLoader;
	}
	
	public ParserRule getFileLoaderRule() {
		return getFileLoaderAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBooleanObject returns ecore::EBooleanObject:
	//    'true' | 'false';
	public EBooleanObjectElements getEBooleanObjectAccess() {
		return pEBooleanObject;
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}
	
	//enum EnumType returns EnumType:
	//    line='line'|bar='bar'|pie='pie'|doughnut='doughnut'|scatter ='scatter'|bubble ='bubble'|radar='radar'|polarArea='polarArea';
	public EnumTypeElements getEnumTypeAccess() {
		return eEnumType;
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum EnumComparaison returns EnumComparaison:
	//    none='none'|equal='='|sup='>'|inf='<'|supEqual='>='|infEqual='<='|notEqual='!=';
	public EnumComparaisonElements getEnumComparaisonAccess() {
		return eEnumComparaison;
	}
	
	public EnumRule getEnumComparaisonRule() {
		return getEnumComparaisonAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
